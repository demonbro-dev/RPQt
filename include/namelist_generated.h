// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NAMELIST_RPNAMELISTCONF_H_
#define FLATBUFFERS_GENERATED_NAMELIST_RPNAMELISTCONF_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace RPNameListConf {

struct Passphrase;
struct PassphraseBuilder;

struct NameList;
struct NameListBuilder;

struct Config;
struct ConfigBuilder;

struct Passphrase FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PassphraseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PHRASEVALUE = 4
  };
  const ::flatbuffers::String *phrasevalue() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PHRASEVALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PHRASEVALUE) &&
           verifier.VerifyString(phrasevalue()) &&
           verifier.EndTable();
  }
};

struct PassphraseBuilder {
  typedef Passphrase Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_phrasevalue(::flatbuffers::Offset<::flatbuffers::String> phrasevalue) {
    fbb_.AddOffset(Passphrase::VT_PHRASEVALUE, phrasevalue);
  }
  explicit PassphraseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Passphrase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Passphrase>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Passphrase> CreatePassphrase(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> phrasevalue = 0) {
  PassphraseBuilder builder_(_fbb);
  builder_.add_phrasevalue(phrasevalue);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Passphrase> CreatePassphraseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *phrasevalue = nullptr) {
  auto phrasevalue__ = phrasevalue ? _fbb.CreateString(phrasevalue) : 0;
  return RPNameListConf::CreatePassphrase(
      _fbb,
      phrasevalue__);
}

struct NameList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NameListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MEMBERS = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *members() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MEMBERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_MEMBERS) &&
           verifier.VerifyVector(members()) &&
           verifier.VerifyVectorOfStrings(members()) &&
           verifier.EndTable();
  }
};

struct NameListBuilder {
  typedef NameList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(NameList::VT_NAME, name);
  }
  void add_members(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> members) {
    fbb_.AddOffset(NameList::VT_MEMBERS, members);
  }
  explicit NameListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NameList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NameList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NameList> CreateNameList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> members = 0) {
  NameListBuilder builder_(_fbb);
  builder_.add_members(members);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NameList> CreateNameListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *members = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto members__ = members ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*members) : 0;
  return RPNameListConf::CreateNameList(
      _fbb,
      name__,
      members__);
}

struct Config FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME_LISTS = 4,
    VT_PASSPHRASE = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<RPNameListConf::NameList>> *name_lists() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RPNameListConf::NameList>> *>(VT_NAME_LISTS);
  }
  const RPNameListConf::Passphrase *passphrase() const {
    return GetPointer<const RPNameListConf::Passphrase *>(VT_PASSPHRASE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME_LISTS) &&
           verifier.VerifyVector(name_lists()) &&
           verifier.VerifyVectorOfTables(name_lists()) &&
           VerifyOffset(verifier, VT_PASSPHRASE) &&
           verifier.VerifyTable(passphrase()) &&
           verifier.EndTable();
  }
};

struct ConfigBuilder {
  typedef Config Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name_lists(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RPNameListConf::NameList>>> name_lists) {
    fbb_.AddOffset(Config::VT_NAME_LISTS, name_lists);
  }
  void add_passphrase(::flatbuffers::Offset<RPNameListConf::Passphrase> passphrase) {
    fbb_.AddOffset(Config::VT_PASSPHRASE, passphrase);
  }
  explicit ConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Config> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Config>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Config> CreateConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RPNameListConf::NameList>>> name_lists = 0,
    ::flatbuffers::Offset<RPNameListConf::Passphrase> passphrase = 0) {
  ConfigBuilder builder_(_fbb);
  builder_.add_passphrase(passphrase);
  builder_.add_name_lists(name_lists);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Config> CreateConfigDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<RPNameListConf::NameList>> *name_lists = nullptr,
    ::flatbuffers::Offset<RPNameListConf::Passphrase> passphrase = 0) {
  auto name_lists__ = name_lists ? _fbb.CreateVector<::flatbuffers::Offset<RPNameListConf::NameList>>(*name_lists) : 0;
  return RPNameListConf::CreateConfig(
      _fbb,
      name_lists__,
      passphrase);
}

inline const RPNameListConf::Config *GetConfig(const void *buf) {
  return ::flatbuffers::GetRoot<RPNameListConf::Config>(buf);
}

inline const RPNameListConf::Config *GetSizePrefixedConfig(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RPNameListConf::Config>(buf);
}

inline bool VerifyConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RPNameListConf::Config>(nullptr);
}

inline bool VerifySizePrefixedConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RPNameListConf::Config>(nullptr);
}

inline void FinishConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RPNameListConf::Config> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RPNameListConf::Config> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace RPNameListConf

#endif  // FLATBUFFERS_GENERATED_NAMELIST_RPNAMELISTCONF_H_
